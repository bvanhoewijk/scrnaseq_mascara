---
title: "tomato_rep12_hdwgcna"
format: html
editor: visual
---

```{r}
rm(list=ls())
gc()

# single-cell analysis package
library(Seurat)

# plotting and data science packages
library(tidyverse)
library(cowplot)
library(patchwork)

# co-expression network analysis packages:
library(WGCNA)
library(hdWGCNA)
library(gASCA)
# using the cowplot theme for ggplot
theme_set(theme_cowplot())

library(devtools)
library(ggplot2)
#library(MetStaT)
library(gASCA)
library(patchwork)
library(readxl)
library(ggfortify)
library(ggrepel)
library(grid)
library(gridExtra)
library(tidyr)
library(tidyverse)
library(reshape2)
library(scales)
library(matrixStats)
library(DESeq2)
library(MASS)
library(glmnet)
library(doParallel)    
library(MUVR) 
library(pheatmap)
library(caret)
library(data.table)
library(plotly)
library(mixOmics)
#library(DiscriMiner)
library(pracma)
library(matlib)
library(truncnorm)
library(pls)
library(Seurat)

# optionally enable multithreading
enableWGCNAThreads(nThreads = 8)
```

```{r}
getwd()
source("../03_MASCARA/code/DATA_SIM_FUNCS.R")
source("../03_MASCARA/code//MASCARA_FUNCS.R")
```

# 1 Load data

```{r}
pbmc <- readRDS("../02_scRNA_analysis/data/pbmc_with_scina.rds")
pbmc
```

```{r}
colnames(pbmc@meta.data)
```

```{r}
table(pbmc@meta.data$scsorter)
```

Grab cells that are not unknown:

```{r}
pbmc <- pbmc[,pbmc@meta.data$SCINA != "unknown"]
pbmc
```

# 2 Plot

```{r}
p <- DimPlot(pbmc, group.by="SCINA")
p
```

```{r}
seurat_obj <- SetupForWGCNA(
  pbmc,
  gene_select = "fraction", # the gene selection approach
  fraction = 0.01, # fraction of cells that a gene needs to be expressed in order to be included
  wgcna_name = "tutorial" # the name of the hdWGCNA experiment
)
```

# 3 MASCARA on meta cell

```{r}
# construct metacells  in each group
seurat_obj <- MetacellsByGroups(
  seurat_obj = seurat_obj,
  group.by = c("SCINA"), # specify the columns in seurat_obj@meta.data to group by
  reduction = 'pca', # select the dimensionality reduction to perform KNN on
  k = 25, # nearest-neighbors parameter
  max_shared = 15, # maximum number of shared cells between two metacells
  ident.group = 'SCINA', # set the Idents of the metacell seurat object
  min_cells=100, # default
)

# normalize metacell expression matrix:
seurat_obj <- NormalizeMetacells(seurat_obj)
```

## 3.1 Process the metacell Seurat object

Since we store the Metacell expression information as its own Seurat object, we can run Seurat functions on the metacell data. We can get the metacell object from the hdWGCNA experiment usingÂ `GetMetacellObject`.

Additionally, we have included a few wrapper functions to apply the Seurat workflow to the metacell object within the hdWGCNA experiment. Here we apply these wrapper functions to process the metacell object and visualize the aggregated expression profiles in two dimensions with UMAP.

```{r}
seurat_obj <- ScaleMetacells(seurat_obj, features=VariableFeatures(seurat_obj))
seurat_obj <- RunPCAMetacells(seurat_obj, features=VariableFeatures(seurat_obj))
seurat_obj <- RunHarmony(seurat_obj, "SCINA")
seurat_obj <- RunUMAPMetacells(seurat_obj, reduction='pca', dims=1:15)

p1 <- DimPlotMetacells(seurat_obj, group.by='SCINA') + umap_theme()
p1
```

```{r}
metacell_obj <- GetMetacellObject(seurat_obj)
rownames(metacell_obj) <- gsub(pattern="\\..*", "", rownames(metacell_obj))
rownames(metacell_obj) <- gsub(pattern="^gene:", "", rownames(metacell_obj))
```

```{r}
library(tidyverse)
```

```{r}
counts <- GetAssayData(metacell_obj)
str(counts)
```

```{r}
test_counter <- function(x){
  sum(x == 0) / length(x)  
}

good_gene <- apply(counts, 1, test_counter)

hist(good_gene, breaks=seq(0, 1.0, 0.01), main="Missing data genes", xlab="Fraction missing")

```

```{r}
# Max 0.98 missing
good <- good_gene < 0.98
table(good)
```

```{r}
metacell_obj <- metacell_obj[good, ]
```

```{r}
meta <- data.frame(cell_types=gsub("_\\d+$", "", colnames(metacell_obj)))
head(meta)
```

```{r}
fig2e_genes <- c("Solyc05g051550","Solyc09g083050","Solyc03g005320",
                 "Solyc01g094750","Solyc02g014730","Solyc01g095750",
                 "Solyc01g094700","Solyc04g011600","Solyc06g074390",
                 "Solyc11g067180","Solyc03g097500","Solyc05g054890",
                 "Solyc09g065420","Solyc03g115960")
found <- c()
for(bait in fig2e_genes){
  found <- c(found, rownames(metacell_obj)[grep(bait, rownames(metacell_obj))])
  
}

DotPlot(metacell_obj, features=found, scale=TRUE,) + RotatedAxis() + coord_flip()


```

## 3.2 ASCA

```{r}
ar <- ASCA_decompose(d = meta, x = t(counts), f = "cell_types")
resids <- ar$residuals
```

```{r}
baits <- fig2e_genes[1:4]
# Correl. to melted df:
cormat <- cor(resids[,which(colnames(resids) %in% baits)])

melted_cormat <- as.data.frame(cormat) |> 
                 rownames_to_column() |> 
                 pivot_longer(2:(ncol(cormat)+1))

colnames(melted_cormat) <- c("gene1", "gene2", "value")

melted_cormat

################ GGPLOT the thing:

ggplot(data=melted_cormat, aes(x=gene1, y=gene2, fill=value)) + 
  geom_tile() + 
  xlab("") +
  ylab("") +
  geom_text(aes(label=round(value, 1)), color="white") +
  scale_fill_gradient2(low = "#075AFF",
                       mid = "#FFFFCC",
                       high = "#FF0000",
                       breaks=c(-1, 0, 1),
                       limits=c(-1,1)) +
  theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
```

## 3.3 PLS

```{r}
library(pls)
spls_res <- simpls.fit(resids[,-which(colnames(resids) %in% baits)],
                          resids[,which(colnames(resids) %in% baits)], ncomp = 5)
```

```{r}
q_bar <- colMeans(spls_res$Yloadings)
R <- spls_res$projection
R_TP <- (dot(t(R),q_bar)/dot(q_bar,q_bar))
  
Candidates <- as.data.frame(R_TP[order(R_TP, decreasing = TRUE)])
```

```{r}
# Transpose to make the 'gene expression' the same as
# in the `expr` object
resids_t <- t(resids)
```

## 3.4 Plot results

```{r, fig.width=10, fig.height=4}
library(scales)
name1 <- baits[3]
name2 <- rownames(Candidates)[1]

# Corrected counts (residuals)
df1 <- data.frame(gene1=resids_t[name1, ], 
                  gene2=resids_t[name2, ], 
                  Celltype = meta$cell_types)
cor1 <- round(cor(df1$gene1, df1$gene2),2)


# P1
p1 <- ggplot(data=df1, aes(gene1, gene2)) + 
  geom_point(aes(colour=Celltype), alpha = 0.8) + 
  xlab(paste0("bait: ", name1)) + 
  ylab("") +
  ggtitle(paste0("Residuals of gene expression\ncorr:", cor1)) 
  

p1

# P2
df2 <- data.frame(gene1=counts[name1, ], 
                  gene2=counts[name2, ], 
                  Celltype = meta$cell_types)
cor2 <- round(cor(df2$gene1, df2$gene2),2)

p2 <- ggplot(data=df2, aes(gene1, gene2)) + 
  geom_point(aes(colour=Celltype), alpha = 0.8) + 
  xlab(paste0("bait: ", name1)) + 
  ylab(paste0("target: ", name2)) +
  ggtitle(paste0("Gene expression\ncorr:", cor2)) +
  theme(legend.position = "none")

p2|p1
```

```{r, fig.width=6, fig.height=6}
# Create color list of top20:
cols <- rep(1, nrow(R))
top20 <- rownames(Candidates)[1:20]

cols[rownames(R) %in% top20] <- 2
plot(R[, 1], R[,2], pch=19, col=cols)

to_plot =  data.frame(x=R[, 1], y=R[,2], group=as.factor(cols))
ggplot(data=to_plot, aes(x=x, y=y, color=group)) + geom_point()
```

```{r}
i <- 0
for(bait in fig2e_genes){
  if(bait %in% rownames(Candidates)){
    index <- grep(bait, rownames(Candidates))
    cat(paste0("Gene ", bait, " (",i,") found at rank ", index), "\n") 
  }else{
    cat(paste0("Gene ", bait, " (",i,") not found"), "\n") 
  }
  i <- i+1
}
```

```{r}
# Create color list of top20:
cols <- rep("gene", nrow(R))
top10 <- head(rownames(Candidates), 10)
bot10 <- tail(rownames(Candidates), 10)

cols[rownames(R) %in% top10] <- "Top 10"
cols[rownames(R) %in% bot10] <- "Bottom 10"
cols[rownames(R) %in% fig2e_genes] <- "bait"
to_plot =  data.frame(x=R[, 1], y=R[,2], group=as.factor(cols))


ggplot(data=to_plot, aes(x=x, y=y, color=group)) + geom_point()

table(cols)
```

```{r}
R_new <- as.data.frame(R)
R_new$group <- cols

# Same function as depreciated `tidyverse::melt()`:
R_new <- R_new |> rownames_to_column() |> 
  pivot_longer(cols="Comp 1":"Comp 5", names_to = "component")

ggplot(R_new, aes(group=rowname)) + 
  ylab("Residual") +
  # Plot the rest of the dataset with 10% opacity:
  geom_point(data=R_new[R_new$group=="gene",], 
             mapping=aes(x=component, y=value),col="darkgrey", alpha=0.1) +
  geom_line(data=R_new[R_new$group=="gene",], 
            mapping=aes(x=component, y=value),col="darkgrey", alpha=0.1) +
  # Plot baits
  geom_point(data=R_new[R_new$group=="bait",], 
             mapping=aes(x=component, y=value, color=group)) +
  geom_line(data=R_new[R_new$group=="bait",], 
             mapping=aes(x=component, y=value, color=group)) +
  # Plot Top candidates:
  geom_point(data=R_new[R_new$group=="Top 10",], 
             mapping=aes(x=component, y=value, color=group)) + 
  geom_line(data=R_new[R_new$group=="Top 10",], 
             mapping=aes(x=component, y=value, color=group)) +
  # Plot Bottom candidates:
  geom_point(data=R_new[R_new$group=="Bottom 10",], 
             mapping=aes(x=component, y=value, color=group)) + 
  geom_line(data=R_new[R_new$group=="Bottom 10",], 
             mapping=aes(x=component, y=value, color=group))
```

# 4 MASCARA on un-merged celltypes

## 4.1 Un-merge the metacells

```{r}
cells_merged <- lapply(metacell_obj$cells_merged, function(x) str_split(unname(x), ",")[[1]]) |> stack()

table(gsub("_\\d+$", "", cells_merged$ind))
cat("SUM:", sum(table(gsub("_\\d+$", "", cells_merged$ind))), "\n")
```

```{r}
cells_merged
```

```{r}
length(unique(cells_merged$values))
```

```{r}
pbmc_unmerged <- pbmc[,cells_merged$values]
pbmc_unmerged
```

```{r}
# Left join the cellnames of the big matrix and the de-convoluted 'cells_merged'
# object
a <- merge(colnames(pbmc_unmerged), cells_merged, all.x = TRUE, by.x="x", by.y="values")
```

```{r}
pbmc_unmerged$unmerged_celltype <- as.character(a$ind)
head(pbmc_unmerged$unmerged_celltype)
```

```{r}
counts <- GetAssayData(pbmc_unmerged)
dim(counts)
meta <- data.frame(unmerged_celltype=gsub("_\\d+$", "", pbmc_unmerged$unmerged_celltype))
as.data.frame(table(meta$unmerged_celltype))
```

```{r}
rownames(counts) <- gsub(pattern="\\..*", "", rownames(counts))
rownames(counts) <- gsub(pattern="^gene:", "", rownames(counts))
```

## 4.2 ASCA

```{r}
ar <- ASCA_decompose(d = meta, x = t(counts), f = "unmerged_celltype")
resids <- ar$residuals
cor(resids[,which(colnames(resids) %in% baits)])
```

## 4.3 PLS

```{r}
library(pls)
X <- resids[,-which(colnames(resids) %in% baits[1:4])]
y <- resids[,which(colnames(resids) %in% baits[1:4])]
spls_res <- simpls.fit(X, y, ncomp = 5)
```

```{r}
spls_res <- simpls.fit(X, y, ncomp = 5)
```

```{r}
q_bar <- colMeans(spls_res$Yloadings)
R <- spls_res$projection
R_TP <- (dot(t(R),q_bar)/dot(q_bar,q_bar))
  
Candidates <- as.data.frame(R_TP[order(R_TP, decreasing = TRUE)])
```

## 4.4 Plot results

```{r}
# Create color list of top20:
cols <- rep("gene", nrow(R))
top10 <- head(rownames(Candidates), 10)
bot10 <- tail(rownames(Candidates), 10)

cols[rownames(R) %in% top10] <- "Top 10"
cols[rownames(R) %in% bot10] <- "Bottom 10"
cols[rownames(R) %in% fig2e_genes] <- "bait"
to_plot =  data.frame(x=R[, 1], y=R[,2], group=as.factor(cols))


ggplot(data=to_plot, aes(x=x, y=y, color=group)) + geom_point()

```

# 5 Dotplots of gene expression of various pathways

```{r}
ja_pathway <- c("Solyc01g109140", "Solyc10g007960", "Solyc01g103390", 
                "Solyc07g042170", "Solyc03g118540", "Solyc06g068930", 
                "Solyc08g036640", "Solyc10g076670")

ethylene_receptors <- c("Solyc08g081540", "Solyc02g091990", 
                        "Solyc02g077370", "Solyc11g011750", 
                        "Solyc01g090300", "Solyc09g075420")

auxin_response <- c("Solyc06g084070", "Solyc07g048070", 
                    "Solyc03g082520", "Solyc03g082530", 
                    "Solyc06g005090", "Solyc06g007390", 
                    "Solyc02g085910")

aba_response <- c("Solyc11g065930", "Solyc03g095780", 
                  "Solyc02g076770", "Solyc06g050500")

ga_response <- c("Solyc01g079200", "Solyc07g061720", 
                 "Solyc02g083870", "Solyc02g083880")

DotPlotGeneList <- function(genelist, title){
  found <- NULL
  for(bait in c(genelist)){
    found <- c(found, rownames(metacell_obj)[grep(bait, rownames(metacell_obj))])
  }
  
  p <- DotPlot(metacell_obj, features=found, scale=TRUE) + 
    RotatedAxis() + 
    coord_flip() + 
    ggtitle(title)
  
  plot(p)
}

DotPlotGeneList(ja_pathway, "ja_pathway")
DotPlotGeneList(ethylene_receptors, "ethylene_receptors")
DotPlotGeneList(auxin_response, "auxin_response")
DotPlotGeneList(aba_response, "aba_response")
DotPlotGeneList(ga_response, "aba_response")
```

## 5.1 Jasmonic acid

```{r}
ja_pathway <- c("Solyc01g109140", "Solyc10g007960", "Solyc01g103390", 
                "Solyc07g042170", "Solyc03g118540", "Solyc06g068930", 
                "Solyc08g036640", "Solyc10g076670")


baits <- ja_pathway[ja_pathway %in% colnames(resids)]
baits
```

```{r}
cormat <- cor(resids[,which(colnames(resids) %in% baits)])
melted_cormat <- melt(cormat)

ggplot(data=melted_cormat, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile() + 
  xlab("") +
  ylab("") +
  geom_text(aes(label=round(value, 2)), color="white") +
  scale_fill_gradient2(low = "#075AFF",
                       mid = "#FFFFCC",
                       high = "#FF0000",
                       breaks=c(-1, 0, 1),
                       limits=c(-1,1)) +
  theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
```

Correlation of baits not signfiican

## 5.2 Auxin response

```{r}

auxin_response <- c("Solyc06g084070", "Solyc07g048070", 
                    "Solyc03g082520", "Solyc03g082530", 
                    "Solyc06g005090", "Solyc06g007390", 
                    "Solyc02g085910")

baits <- auxin_response[auxin_response %in% colnames(resids)]
baits

```

```{r}
cormat <- cor(resids[,which(colnames(resids) %in% baits)])
melted_cormat <- melt(cormat)

ggplot(data=melted_cormat, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile() + 
  xlab("") +
  ylab("") +
  geom_text(aes(label=round(value, 2)), color="white") +
  scale_fill_gradient2(low = "#075AFF",
                       mid = "#FFFFCC",
                       high = "#FF0000",
                       breaks=c(-1, 0, 1),
                       limits=c(-1,1)) +
  theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
```

## 5.3 ABA response

```{r}
aba_response <- c("Solyc11g065930", "Solyc03g095780", 
                  "Solyc02g076770", "Solyc06g050500")
baits <- aba_response[aba_response %in% colnames(resids)]
baits
```

```{r}
cormat <- cor(resids[,which(colnames(resids) %in% baits)])
melted_cormat <- melt(cormat)

ggplot(data=melted_cormat, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile() + 
  xlab("") +
  ylab("") +
  geom_text(aes(label=round(value, 2)), color="white") +
  scale_fill_gradient2(low = "#075AFF",
                       mid = "#FFFFCC",
                       high = "#FF0000",
                       breaks=c(-1, 0, 1)) +
  theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
```

# 6 Cleanup

```{r}
search()
gc()
```
