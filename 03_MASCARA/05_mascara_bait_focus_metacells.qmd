---
title: "Untitled"
format: html
editor: visual
---

# 1. Clean env and load packages

```{r}
rm(list=ls())
gc()
library(devtools)
library(ggplot2)
#library(MetStaT)
library(gASCA)
library(patchwork)
library(readxl)
library(ggfortify)
library(ggrepel)
library(grid)
library(gridExtra)
library(tidyr)
library(tidyverse)
library(reshape2)
library(scales)
library(matrixStats)
library(DESeq2)
library(MASS)
library(glmnet)
library(doParallel)    
library(MUVR) 
library(pheatmap)
library(caret)
library(data.table)
library(plotly)
library(mixOmics)
#library(DiscriMiner)
library(pracma)
library(matlib)
library(truncnorm)
library(pls)
library(Seurat)


library(hdWGCNA)
source("code/DATA_SIM_FUNCS.R")
source("code/MASCARA_FUNCS.R")
```

## 1.1 Load data

```{r}
# pbmc <- readRDS("../02_scRNA_analysis/data/single_cell_pbmc.rds")
pbmc <- readRDS("../02_scRNA_analysis/data/pbmc_with_scina.rds")
```

```{r}
colnames(pbmc@meta.data)
```

```{r}
table(pbmc@meta.data$SCINA)
```

```{r}
pbmc@meta.data$SCINA[pbmc@meta.data$SCINA == "unknown"] <- "Unknown"
lvls <- unique(c(pbmc@meta.data$sctype_classification, 
         pbmc@meta.data$SCINA,
         pbmc@meta.data$chisquare,
         pbmc@meta.data$scsorter))


pbmc@meta.data[,9:13] <- lapply(pbmc@meta.data[,9:13], factor, levels=lvls)
```

```{r}
Idents(pbmc) <- "seurat_clusters"
pbmc.sub <- pbmc[, pbmc@meta.data$seurat_clusters != "Unknown"]
p1 <- DimPlot(pbmc.sub) + ggtitle("Seurat")

Idents(pbmc) <- "chisquare"
pbmc.sub <- pbmc[, pbmc@meta.data$chisquare != "Unknown"]
p2 <- DimPlot(pbmc.sub) + ggtitle("chisquare")

Idents(pbmc) <- "scsorter"
pbmc.sub <- pbmc[, pbmc@meta.data$scsorter != "Unknown"]
p3 <- DimPlot(pbmc.sub) + ggtitle("scsorter")

Idents(pbmc) <- "SCINA"
pbmc.sub <- pbmc[, pbmc@meta.data$SCINA != "Unknown"]
p4 <- DimPlot(pbmc.sub) + ggtitle("SCINA")

(p1+p2) / (p3+p4) + plot_annotation(tag_levels = 'a')
```

```{r}
ElbowPlot(pbmc, ndims = 50) + geom_vline(xintercept = 15, col="red")

```

```{r}
fig2e_genes <- c("Solyc05g051550","Solyc09g083050","Solyc03g005320","Solyc01g094750","Solyc02g014730","Solyc01g095750","Solyc01g094700","Solyc04g011600","Solyc06g074390","Solyc11g067180","Solyc03g097500","Solyc05g054890","Solyc09g065420","Solyc03g115960")
found <- c()
for(bait in fig2e_genes){
  found <- c(found, rownames(pbmc)[grep(bait, rownames(pbmc))])
  
}

Idents(pbmc) <- "seurat_clusters"
pbmc.sub <- pbmc[, pbmc@meta.data$seurat_clusters != "Unknown"]
p1 <- DotPlot(pbmc, features=found, scale=TRUE,) + RotatedAxis() + coord_flip() + ggtitle("Seurat")

Idents(pbmc) <- "chisquare"
pbmc.sub <- pbmc[, pbmc@meta.data$chisquare != "Unknown"]
p2 <- DotPlot(pbmc, features=found, scale=TRUE,) + RotatedAxis() + coord_flip() + ggtitle("chisquare")

Idents(pbmc) <- "scsorter"
pbmc.sub <- pbmc[, pbmc@meta.data$scsorter != "Unknown"]
p3 <- DotPlot(pbmc, features=found, scale=TRUE,) + RotatedAxis() + coord_flip() + ggtitle("scsorter")

Idents(pbmc) <- "SCINA"
pbmc.sub <- pbmc[, pbmc@meta.data$SCINA != "Unknown"]
p4 <- DotPlot(pbmc, features=found, scale=TRUE,) + RotatedAxis() + coord_flip() + ggtitle("SCINA")

(p1+p2) / (p3+p4) + plot_annotation(tag_levels = 'a')
```

```{r}
p4
```

# 2 MASCARA on suberin genes

## 2.1 Summary statistics

### 2.1.1 Dotplots of suberin genes

To make sure we loaded the right data

```{r}
fig2e_genes <- c("Solyc05g051550","Solyc09g083050","Solyc03g005320","Solyc01g094750","Solyc02g014730","Solyc01g095750","Solyc01g094700","Solyc04g011600","Solyc06g074390","Solyc11g067180","Solyc03g097500","Solyc05g054890","Solyc09g065420","Solyc03g115960")
found <- c()
for(bait in fig2e_genes){
  found <- c(found, rownames(pbmc)[grep(bait, rownames(pbmc))])
  
}
for(item in c("chisquare", "scsorter", "sctype_classification", "SCINA")){
  Idents(pbmc) <- item
  p <- DotPlot(pbmc, features=found, scale=TRUE,) + RotatedAxis() + coord_flip() + ggtitle(item)
  plot(p)
}

```

## 2.2 Cleanup

### 2.2.1 Drop unknowns

```{r}
pbmc <- pbmc[, pbmc$SCINA != "unknown"]
pbmc
```

```{r}
seurat_obj <- SetupForWGCNA(
  pbmc,
  gene_select = "fraction", # the gene selection approach
  fraction = 0.01, # fraction of cells that a gene needs to be expressed in order to be included
  wgcna_name = "tutorial" # the name of the hdWGCNA experiment
)
seurat_obj
```

### 2.2.2 Metacell creation

```{r}
# construct metacells  in each group
seurat_obj <- MetacellsByGroups(
  seurat_obj = seurat_obj,
  group.by = c("SCINA"), # specify the columns in seurat_obj@meta.data to group by
  reduction = 'pca', # select the dimensionality reduction to perform KNN on
  k = 25, # nearest-neighbors parameter
  max_shared = 15, # maximum number of shared cells between two metacells
  ident.group = 'SCINA' # set the Idents of the metacell seurat object
)

# normalize metacell expression matrix:
seurat_obj <- NormalizeMetacells(seurat_obj)
```
```{r}
seurat_obj
```

```{r}
seurat_obj <- ScaleMetacells(seurat_obj, features=VariableFeatures(seurat_obj))
seurat_obj <- RunPCAMetacells(seurat_obj, features=VariableFeatures(seurat_obj))
seurat_obj <- RunHarmony(seurat_obj, "SCINA")
seurat_obj <- RunUMAPMetacells(seurat_obj, reduction='pca', dims=1:15)

p1 <- DimPlotMetacells(seurat_obj, group.by='SCINA') + umap_theme()
p1
```

```{r}
metacell_obj <- GetMetacellObject(seurat_obj)
metacell_obj
```

### 2.2.3 Selection of expressed cells

```{r}
fig2e_genes <- c("Solyc05g051550","Solyc09g083050","Solyc03g005320","Solyc01g094750","Solyc02g014730","Solyc01g095750","Solyc01g094700","Solyc04g011600","Solyc06g074390","Solyc11g067180","Solyc03g097500","Solyc05g054890","Solyc09g065420","Solyc03g115960")
found <- c()
for(bait in fig2e_genes){
  found <- c(found, rownames(metacell_obj)[grep(bait, rownames(metacell_obj))])
}
# Select suberin genes and calculate the sum of the expression
# if that sum is > 1: keep
expr <- GetAssayData(metacell_obj)
suberin_expression_cells <- colSums(expr[rownames(expr) %in% found,]) > 0

pbmc_suberin <- metacell_obj[,suberin_expression_cells]
table(suberin_expression_cells)
```

```{r}
DimPlot(pbmc_suberin)
```

### 2.2.3 Selection of expressed genes

```{r}
counts.sub <- as.matrix(GetAssayData(pbmc_suberin))
# non_zero <- apply(counts.sub, 1, function(x) sum(x > 0)/length(x))
# 
# # At least 1% data:
# counts.sub <- counts.sub[non_zero > 0.05, ]
# cat("Cells: ", dim(counts.sub)[2], "\n")
# cat("Genes: ", dim(counts.sub)[1], "\n")
```

```{r}
pbmc_suberin@meta.data
```

## 2.3 MASCARA

```{r}
meta.sub <- pbmc_suberin@meta.data
meta <- data.frame(SCINA=meta.sub$SCINA)
meta
```

```{r}
as.data.frame(table(meta$SCINA)) |> ggplot() + 
  geom_col(aes(y=Var1, x=Freq)) + 
  xlab("Meta cell count") + 
  ylab("Celltype")
```

### 2.3.1 ASCA

```{r}
ar <- ASCA_decompose(d = meta, x = t(counts.sub), f = "SCINA")
resids <- ar$residuals
```

```{r}
hist(resids)
```

### 2.3.2 Correl plot

```{r}
cormat <- cor(resids[,which(colnames(resids) %in% found[1:4])])

melted_cormat <- melt(cormat)

ggplot(data=melted_cormat, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile() + 
  xlab("") +
  ylab("") +
  geom_text(aes(label=round(value, 2)), color="white") +
  scale_fill_gradient2(low = "#075AFF",
                       mid = "#FFFFCC",
                       high = "#FF0000",
                       breaks=c(-1, 0, 1),
                       limits=c(-1,1)) +
  theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))

```

```{r}
cormat <- cor(resids[,which(colnames(resids) %in% found[1:4])])

melted_cormat <- melt(cormat)

cormat1 <- ggplot(data=melted_cormat, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile() + 
  xlab("") +
  ylab("") +
  geom_text(aes(label=round(value, 2)), color="black") +
  scale_fill_gradient2(low = "#075AFF",
                       mid = "#FFFFCC",
                       high = "#FF0000",
                       breaks=c(-1, 0, 1),
                       limits=c(-1,1)) +
  theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1), legend.position = "none") + ggtitle("Residuals")

####
counts.sub2 <- t(counts.sub)
cormat <- cor(counts.sub2[, which(colnames(counts.sub2) %in% found[1:4])])
melted_cormat <- melt(cormat)
cormat2 <- ggplot(data=melted_cormat, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile() + 
  xlab("") +
  ylab("") +
  geom_text(aes(label=round(value, 2)), color="black") +
  scale_fill_gradient2(low = "#075AFF",
                       mid = "#FFFFCC",
                       high = "#FF0000",
                       breaks=c(-1, 0, 1),
                       limits=c(-1,1)) +
  theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1), axis.text.y=element_blank()) + ggtitle("Gene expression") 

(cormat1 | cormat2) + plot_annotation('Meta cells', tag_levels = list(c("c", "d")))
```

### 2.3.3 Number of components (elbow)

```{r}
X <- resids[,-which(colnames(resids) %in% found[1:4])]
y <- resids[,which(colnames(resids) %in% found[1:4])]

ncomp <- 10
nrep  <- 5
result <- data.frame(comp=1:ncomp)
for(i in c(1:nrep)){
  index <- sample(1:ncol(X), as.integer(ncol(X)*0.8))
  X_small <- X[,index]
  fit <- simpls.fit(X_small, y, ncomp = ncomp)
  result[paste0("rep", i)] <- fit$Xvar/fit$Xtotvar
}

result_melt <- result |> pivot_longer(cols="rep1" : paste0("rep",nrep))
elbow_plot <- ggplot(data=result_melt, mapping=aes(x=comp, y=value)) + geom_point() + geom_smooth() + geom_jitter() + xlab("Component") + ylab("Fraction explained variance") + scale_x_continuous(breaks=c(1:ncomp))

elbow_plot
```

### 2.3.4 PLS + Candidates

```{r}
library(pls)
X <- resids[,-which(colnames(resids) %in% found[1:4])]
y <- resids[,which(colnames(resids) %in% found[1:4])]
spls_res <- simpls.fit(X, y, ncomp = 3)

q_bar <- colMeans(spls_res$Yloadings)
R <- spls_res$projection
R_TP <- (dot(t(R),q_bar)/dot(q_bar,q_bar))
  
Candidates <- as.data.frame(R_TP[order(R_TP, decreasing = TRUE)])
```

```{r}
dim(R)
```

### 2.3.5 Lineplot the components

```{r}
# Create color list of top20:
cols <- rep("gene", nrow(R))
top10 <- head(rownames(Candidates), 10)
bot10 <- tail(rownames(Candidates), 10)

cols[rownames(R) %in% top10] <- "Top 10"
cols[rownames(R) %in% bot10] <- "Bottom 10"
cols[rownames(R) %in% found] <- "bait"
to_plot =  data.frame(x=R[, 1], y=R[,2], group=as.factor(cols))


ggplot(data=to_plot, aes(x=x, y=y, color=group)) + geom_point()
```

```{r}
R_new <- as.data.frame(R)
R_new$group <- cols

# Same function as depreciated `tidyverse::melt()`:
R_new <- R_new |> rownames_to_column() |> 
  pivot_longer(cols="Comp 1":"Comp 3", names_to = "component")

lineplot <- ggplot(R_new, aes(group=rowname)) + 
  ylab("Residual") +
  # Plot the rest of the dataset with 10% opacity:
  geom_point(data=R_new[R_new$group=="gene",], 
             mapping=aes(x=component, y=value),col="darkgrey", alpha=0.1) +
  geom_line(data=R_new[R_new$group=="gene",], 
            mapping=aes(x=component, y=value),col="darkgrey", alpha=0.1) +
  # Plot baits
  geom_point(data=R_new[R_new$group=="bait",], 
             mapping=aes(x=component, y=value, color=group)) +
  geom_line(data=R_new[R_new$group=="bait",], 
             mapping=aes(x=component, y=value, color=group)) +
  # Plot Top candidates:
  geom_point(data=R_new[R_new$group=="Top 10",], 
             mapping=aes(x=component, y=value, color=group)) + 
  geom_line(data=R_new[R_new$group=="Top 10",], 
             mapping=aes(x=component, y=value, color=group)) +
  # Plot Bottom candidates:
  geom_point(data=R_new[R_new$group=="Bottom 10",], 
             mapping=aes(x=component, y=value, color=group)) + 
  geom_line(data=R_new[R_new$group=="Bottom 10",], 
             mapping=aes(x=component, y=value, color=group))

lineplot
```

```{r}

```

```{r}
Candidates
```

```{r}
resids_t <- t(resids)
found %in% rownames(resids_t)
```

### 2.3.6 Plot example genes

```{r}
library(scales)
name1 <- rownames(Candidates)[4]
name2 <- found[2]

# Normalized + transformed counts:
df2 <- data.frame(gene1=counts.sub[name1, ], 
                  gene2=counts.sub[name2, ], 
                  Celltype = meta.sub$SCINA)
zero_filter <- df2$gene1 > 0 & df2$gene2 >0
df2 <- df2[zero_filter,]
cor2 <- round(cor(df2$gene1, df2$gene2),2)


# Corrected counts (residuals)
df1 <- data.frame(gene1=resids_t[name1, ], 
                  gene2=resids_t[name2, ], 
                  Celltype = meta.sub$SCINA)
df1 <- df1[zero_filter,]
cor1 <- round(cor(df1$gene1, df1$gene2),2)


# P1
p1 <- ggplot(data=df1, aes(gene1, gene2)) + 
  geom_point(aes(colour=Celltype), alpha = 0.5) + 
  xlab(paste0("Bait: ", name1)) +
  ylab(paste0("Candidate: ", name2)) +
  ggtitle(paste0("Residuals of gene expression\ncorr:", cor1)) + 
  theme(legend.position = "none")

# P2
p2 <- ggplot(data=df2, aes(gene1, gene2)) + 
  geom_point(aes(colour=Celltype), alpha = 0.5) + 
  xlab(paste0("Bait: ", name1)) +
  ylab(paste0("Candidate: ", name2)) +
  ggtitle(paste0("Gene expression \ncorr:", cor2))


p1+p2 + plot_annotation(tag_levels="a")
```

```{r, fig.width=10, fig.height=6}
top10 <- head(rownames(Candidates), 10)
bot10 <- tail(rownames(Candidates), 10)
d <- counts.sub[c(found, top10, bot10), ]

heatmap.2(d, RowSideColors = c(rep("blue", length(found)), rep("green", 10), rep("red", 10)), 
          trace="none", 
          density.info="none",
          margins =c(8,20))

legend("topright", 
       legend=c("Baits", "Top10", "Bottom10"), 
       col=c("blue", "green", "red"), 
       lty=1, lwd=10)
```

```{r}
(lineplot + elbow_plot) + p1+p2 + plot_annotation(tag_levels="a")
```

# 3 MASCARA on strigolactone genes

## 3.1 Load the data again

```{r}
# pbmc <- readRDS("../02_scRNA_analysis/data/single_cell_pbmc.rds")
# pbmc <- readRDS("../02_scRNA_analysis/data/pbmc_with_scina.rds")
```

```{r}
# colnames(pbmc@meta.data)
```

```{r}
# table(pbmc@meta.data$SCINA)
```

## 3.2 Summary statistics

### 3.2.1 Dotplots of strigolactone genes

```{r}
# strigolactone_genes <- c("Solyc09g065750","Solyc01g090660","Solyc08g066650","Solyc08g062950", "Solyc10g018150","Solyc02g084930", "Solyc08g067620", "Solyc08g067610")
# found <- c()
# for(bait in strigolactone_genes){
#   found <- c(found, rownames(pbmc)[grep(bait, rownames(pbmc))])
# }
# for(item in c("chisquare", "scsorter", "sctype_classification", "SCINA")){
#   Idents(pbmc) <- item
#   p <- DotPlot(pbmc, features=found, scale=TRUE,) + RotatedAxis() + coord_flip() + ggtitle(item)
#   plot(p)
# }

```

## 3.3 Cleanup

### 3.3.1 Drop unknowns

```{r}
# pbmc <- pbmc[, pbmc$SCINA != "unknown"]
# pbmc
```

### 3.3.2 Selection of expressed cells

```{r}
# found <- c()
# for(bait in strigolactone_genes){
#   found <- c(found, rownames(pbmc)[grep(bait, rownames(pbmc))])
# }
# # Select suberin genes and calculate the sum of the expression
# # if that sum is > 1: keep
# expr <- GetAssayData(pbmc)
# strigolactone_expression_cells <- colSums(expr[rownames(expr) %in% found,]) > 1
# 
# pbmc_selection <- pbmc[,strigolactone_expression_cells]
# table(strigolactone_expression_cells)
```

```{r}
# DimPlot(pbmc_selection)
```

### 3.3.3 Selection of expressed genes

```{r}
# counts.sub <- as.matrix(GetAssayData(pbmc_selection))
# non_zero <- apply(counts.sub, 1, function(x) sum(x > 0)/length(x))
# 
# # At least 2% data:
# counts.sub <- counts.sub[non_zero > 0.02, ]
# cat("Cells: ", dim(counts.sub)[2], "\n")
# cat("Genes: ", dim(counts.sub)[1], "\n")
```

## 3.4 MASCARA

```{r}
# meta.sub <- pbmc_selection@meta.data
# meta <- data.frame(scsorter=meta.sub$scsorter, 
#                    seurat=meta.sub$seurat_clusters, 
#                    chisquare=meta.sub$chisquare, 
#                    sctype=meta.sub$sctype,
#                    SCINA=meta.sub$SCINA)
# meta
```

```{r}
# as.data.frame(table(meta$SCINA)) |> ggplot() + 
#   geom_col(aes(y=Var1, x=Freq)) + 
#   xlab("Cell count") + 
#   ylab("Celltype")
```

### 3.4.1 ASCA

```{r}
# ar <- ASCA_decompose(d = meta, x = t(counts.sub), f = "SCINA")
# resids <- ar$residuals
```

```{r}
# hist(resids)
```

### 3.4.2 Correl plot

```{r}
# found <- found[found %in% colnames(resids)]
# found
```

```{r}
# cormat <- cor(resids[,which(colnames(resids) %in% found)])
# 
# melted_cormat <- melt(cormat)
# 
# ggplot(data=melted_cormat, aes(x=Var1, y=Var2, fill=value)) + 
#   geom_tile() + 
#   xlab("") +
#   ylab("") +
#   geom_text(aes(label=round(value, 2)), color="white") +
#   scale_fill_gradient2(low = "#075AFF",
#                        mid = "#FFFFCC",
#                        high = "#FF0000",
#                        breaks=c(-1, 0, 1),
#                        limits=c(-1,1)) +
#   theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))

```

### 3.4.3 PLS + Candidates

```{r}
# library(pls)
# X <- resids[,-which(colnames(resids) %in% found[1:4])]
# y <- resids[,which(colnames(resids) %in% found[1:4])]
# spls_res <- simpls.fit(X, y, ncomp = 5)
# 
# q_bar <- colMeans(spls_res$Yloadings)
# R <- spls_res$projection
# R_TP <- (dot(t(R),q_bar)/dot(q_bar,q_bar))
#   
# Candidates <- as.data.frame(R_TP[order(R_TP, decreasing = TRUE)])
```

### 3.4.4 Lineplot the components

```{r}
# Create color list of top20:
# cols <- rep("gene", nrow(R))
# top10 <- head(rownames(Candidates), 10)
# bot10 <- tail(rownames(Candidates), 10)
# 
# cols[rownames(R) %in% top10] <- "Top 10"
# cols[rownames(R) %in% bot10] <- "Bottom 10"
# cols[rownames(R) %in% found] <- "bait"
# to_plot =  data.frame(x=R[, 1], y=R[,2], group=as.factor(cols))
# 

# ggplot(data=to_plot, aes(x=x, y=y, color=group)) + geom_point()
```

```{r}
# R_new <- as.data.frame(R)
# R_new$group <- cols
# 
# # Same function as depreciated `tidyverse::melt()`:
# R_new <- R_new |> rownames_to_column() |> 
#   pivot_longer(cols="Comp 1":"Comp 5", names_to = "component")
# 
# ggplot(R_new, aes(group=rowname)) + 
#   ylab("Residual") +
#   # Plot the rest of the dataset with 10% opacity:
#   geom_point(data=R_new[R_new$group=="gene",], 
#              mapping=aes(x=component, y=value),col="darkgrey", alpha=0.1) +
#   geom_line(data=R_new[R_new$group=="gene",], 
#             mapping=aes(x=component, y=value),col="darkgrey", alpha=0.1) +
#   # Plot baits
#   geom_point(data=R_new[R_new$group=="bait",], 
#              mapping=aes(x=component, y=value, color=group)) +
#   geom_line(data=R_new[R_new$group=="bait",], 
#              mapping=aes(x=component, y=value, color=group)) +
#   # Plot Top candidates:
#   geom_point(data=R_new[R_new$group=="Top 10",], 
#              mapping=aes(x=component, y=value, color=group)) + 
#   geom_line(data=R_new[R_new$group=="Top 10",], 
#              mapping=aes(x=component, y=value, color=group)) +
#   # Plot Bottom candidates:
#   geom_point(data=R_new[R_new$group=="Bottom 10",], 
#              mapping=aes(x=component, y=value, color=group)) + 
#   geom_line(data=R_new[R_new$group=="Bottom 10",], 
#              mapping=aes(x=component, y=value, color=group))
```

```{r}
# Candidates
```

```{r}
# resids_t <- t(resids)
# found %in% rownames(resids_t)
```

### 3.4.5 Plot example genes

```{r}
# library(scales)
# name1 <- rownames(Candidates)[2]
# name2 <- found[2]
# 
# # Corrected counts (residuals)
# df1 <- data.frame(gene1=resids_t[name1, ], 
#                   gene2=resids_t[name2, ], 
#                   Celltype = meta.sub$SCINA)
# cor1 <- round(cor(df1$gene1, df1$gene2),2)
# 
# # Normalized + transformed counts:
# df2 <- data.frame(gene1=counts.sub[name1, ], 
#                   gene2=counts.sub[name2, ], 
#                   Celltype = meta.sub$SCINA)
# cor2 <- round(cor(df2$gene1, df2$gene2),2)
# 
# 
# # P1
# p1 <- ggplot(data=df1, aes(gene1, gene2)) + 
#   geom_point(aes(colour=Celltype), alpha = 0.5) + 
#   xlab(paste0("Bait: ", name1)) +
#   ylab(paste0("Candidate: ", name2)) +
#   ggtitle(paste0("Residuals of gene expression\ncorr:", cor1)) + 
#   theme(legend.position = "none")
# 
# # P2
# p2 <- ggplot(data=df2, aes(gene1, gene2)) + 
#   geom_point(aes(colour=Celltype), alpha = 0.5) + 
#   xlab(paste0("Bait: ", name1)) +
#   ylab(paste0("Candidate: ", name2)) +
#   ggtitle(paste0("Gene expression \ncorr:", cor2))+ 
#   theme(legend.position = "none")
# 
# 
# p1+p2
```
