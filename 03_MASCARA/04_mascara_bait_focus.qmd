---
title: "Untitled"
format: html
editor: visual
---

# 1. Clean env and load packages

```{r}
rm(list=ls())
gc()
library(devtools)
library(ggplot2)
#library(MetStaT)
library(gASCA)
library(patchwork)
library(readxl)
library(ggfortify)
library(ggrepel)
library(grid)
library(gridExtra)
library(tidyr)
library(tidyverse)
library(reshape2)
library(scales)
library(matrixStats)
library(DESeq2)
library(MASS)
library(glmnet)
library(doParallel)    
library(MUVR) 
library(pheatmap)
library(caret)
library(data.table)
library(plotly)
library(mixOmics)
#library(DiscriMiner)
library(pracma)
library(matlib)
library(truncnorm)
library(pls)
library(Seurat)


source("code/DATA_SIM_FUNCS.R")
source("code/MASCARA_FUNCS.R")
```

## 1.1 Load data

```{r}
# pbmc <- readRDS("../02_scRNA_analysis/data/single_cell_pbmc.rds")
pbmc <- readRDS("../02_scRNA_analysis/data/pbmc_with_scina.rds")
```

```{r}
colnames(pbmc@meta.data)
```

```{r}
table(pbmc@meta.data$SCINA)
```
```{r}
Idents(pbmc) <- "seurat_clusters"
DimPlot(pbmc, label = TRUE)
```


# 2 MASCARA on suberin genes

## 2.1 Summary statistics

### 2.1.1 Dotplots of suberin genes

To make sure we loaded the right data

```{r}
fig2e_genes <- c("Solyc05g051550","Solyc09g083050","Solyc03g005320","Solyc01g094750","Solyc02g014730","Solyc01g095750","Solyc01g094700","Solyc04g011600","Solyc06g074390","Solyc11g067180","Solyc03g097500","Solyc05g054890","Solyc09g065420","Solyc03g115960")
found <- c()
for(bait in fig2e_genes){
  found <- c(found, rownames(pbmc)[grep(bait, rownames(pbmc))])
  
}
for(item in c("chisquare", "scsorter", "sctype_classification", "SCINA")){
  Idents(pbmc) <- item
  p <- DotPlot(pbmc, features=found, scale=TRUE,) + RotatedAxis() + coord_flip() + ggtitle(item)
  plot(p)
}

```

## 2.2 Cleanup

### 2.2.1 Drop unknowns

```{r}
pbmc <- pbmc[, pbmc$SCINA != "unknown"]
pbmc
```

### 2.2.2 Selection of expressed cells

```{r}
fig2e_genes <- c("Solyc05g051550","Solyc09g083050","Solyc03g005320","Solyc01g094750","Solyc02g014730","Solyc01g095750","Solyc01g094700","Solyc04g011600","Solyc06g074390","Solyc11g067180","Solyc03g097500","Solyc05g054890","Solyc09g065420","Solyc03g115960")
found <- c()
for(bait in fig2e_genes){
  found <- c(found, rownames(pbmc)[grep(bait, rownames(pbmc))])
}
# Select suberin genes and calculate the sum of the expression
# if that sum is > 1: keep
expr <- GetAssayData(pbmc)
suberin_expression_cells <- colSums(expr[rownames(expr) %in% found,]) > 1

pbmc_suberin <- pbmc[,suberin_expression_cells]
table(suberin_expression_cells)
```

```{r}
DimPlot(pbmc_suberin)
```

```{r}
pbmc_suberin <- FindVariableFeatures(pbmc_suberin)
pbmc_suberin <- RunPCA(pbmc_suberin, verbose = FALSE, features=VariableFeatures(object=pbmc_suberin))
ElbowPlot(pbmc_suberin, ndims = 50)
```

```{r}
pbmc_suberin <- RunUMAP(pbmc, dims = 1:15, verbose = FALSE)
DimPlot(pbmc_suberin, label = TRUE, group.by = "SCINA")
```

### 2.2.3 Selection of expressed genes

```{r}
fig2e_genes <- c("Solyc05g051550","Solyc09g083050","Solyc03g005320","Solyc01g094750","Solyc02g014730","Solyc01g095750","Solyc01g094700","Solyc04g011600","Solyc06g074390","Solyc11g067180","Solyc03g097500","Solyc05g054890","Solyc09g065420","Solyc03g115960")
found <- c()
for(bait in fig2e_genes){
  found <- c(found, rownames(pbmc_suberin)[grep(bait, rownames(pbmc_suberin))])
}
# Select suberin genes and calculate the sum of the expression
# if that sum is > 1: keep
expr <- GetAssayData(pbmc_suberin)
suberin_expression_cells <- colSums(expr[rownames(expr) %in% found,]) > 0

pbmc_suberin <- pbmc_suberin[,suberin_expression_cells]
table(suberin_expression_cells)

counts.sub <- GetAssayData(pbmc_suberin)
```

## 2.3 MASCARA

```{r}
meta.sub <- pbmc_suberin@meta.data
meta <- data.frame(scsorter=meta.sub$scsorter, 
                   seurat=meta.sub$seurat_clusters, 
                   chisquare=meta.sub$chisquare, 
                   sctype=meta.sub$sctype,
                   SCINA=meta.sub$SCINA)
meta
```

```{r}
as.data.frame(table(meta$SCINA)) |> ggplot() + 
  geom_col(aes(y=Var1, x=Freq)) + 
  xlab("Cell count") + 
  ylab("Celltype")
```

### 2.3.1 ASCA

```{r}
dim(meta)
dim(counts.sub)
```

```{r}
ar <- ASCA_decompose(d = meta, x = t(counts.sub), f = "SCINA")
resids <- ar$residuals
```

```{r}
hist(resids)
```

### 2.3.2 Correl plot

#### 2.3.2.1 Explained variance

```{r}

baits <- found[5:8]
X <- resids[,-which(colnames(resids) %in% baits)]
y <- resids[,which(colnames(resids) %in% baits)]

ncomp <- 10
nrep  <- 5
result <- data.frame(comp=1:ncomp)
for(i in c(1:nrep)){
  index <- sample(1:ncol(X), as.integer(ncol(X)*0.8))
  X_small <- X[,index]
  fit <- simpls.fit(X_small, y, ncomp = ncomp)
  result[paste0("rep", i)] <- fit$Xvar/fit$Xtotvar
}

result_melt <- result |> pivot_longer(cols="rep1" : "rep5")
scree_plot_pls <- ggplot(data=result_melt, mapping=aes(x=comp, y=value)) + geom_point() + geom_smooth() + geom_jitter() + xlab("Component") + ylab("Fraction explained variance") + scale_x_continuous(breaks=c(1:ncomp))
scree_plot_pls
```

#### 2.3.2.2 Actual correlation (pretty ggplot2)
```{r}
cormat1 <- cor(resids[,which(colnames(resids) %in% baits)])

melted_cormat <- melt(cormat1)

cormat_fig1 <- ggplot(data=melted_cormat, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile() + 
  xlab("") +
  ylab("") +
  geom_text(aes(label=round(value, 2)), color="black") +
  scale_fill_gradient2(low = "#075AFF",
                       mid = "#FFFFCC",
                       high = "#FF0000",
                       breaks=c(-1, 0, 1),
                       limits=c(-1,1)) +
  theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1), axis.text.y=element_blank()) + ggtitle("Residuals")

####
counts.sub2 <- t(counts.sub)
cormat2 <- cor(counts.sub2[, which(colnames(counts.sub2) %in% baits)])
melted_cormat <- melt(cormat2)
cormat_fig2 <- ggplot(data=melted_cormat, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile() + 
  xlab("") +
  ylab("") +
  geom_text(aes(label=round(value, 2)), color="black") +
  scale_fill_gradient2(low = "#075AFF",
                       mid = "#FFFFCC",
                       high = "#FF0000",
                       breaks=c(-1, 0, 1),
                       limits=c(-1,1)) +
  theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1), legend.position = "none") + ggtitle("Gene expression") 

(cormat_fig2 | cormat_fig1) + plot_annotation('Single cells', tag_levels = list(c("a", "b")))



```
```{r}
print("Residuals")
round(mean(cormat1[upper.tri(cormat1)]), 2)

print("Gene expression")
round(mean(cormat2[upper.tri(cormat2)]), 2)
```


```{r}
cormat <- cor(t(counts.sub[found,]))

melted_cormat <- melt(cormat)

ggplot(data=melted_cormat, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile() + 
  xlab("") +
  ylab("") +
  geom_text(aes(label=round(value, 1)), color="white") +
  scale_fill_gradient2(low = "#075AFF",
                       mid = "#FFFFCC",
                       high = "#FF0000",
                       breaks=c(-1, 0, 1),
                       limits=c(-1,1)) +
  theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
```

### 2.3.3 PLS + Candidates

```{r}
library(pls)
X <- resids[,-which(colnames(resids) %in% baits)]
y <- resids[,which(colnames(resids) %in% baits)]
spls_res <- simpls.fit(X, y, ncomp = 5)

q_bar <- colMeans(spls_res$Yloadings)
R <- spls_res$projection
R_TP <- (dot(t(R),q_bar)/dot(q_bar,q_bar))
  
Candidates <- as.data.frame(R_TP[order(R_TP, decreasing = TRUE)])
```

```{r}
norm(resids, type="F") 
norm(counts.sub, type="F")

norm(resids, type="F") / norm(counts.sub, type="F")
```
```{r}
?norm
```


### 2.3.4 Lineplot the components

```{r}
# Create color list of top20:
cols <- rep("gene", nrow(R))
top10 <- head(rownames(Candidates), 10)
# bot10 <- tail(rownames(Candidates), 10)

cols[rownames(R) %in% found] <- "POI"
cols[rownames(R) %in% top10] <- "Top 10"
# cols[rownames(R) %in% bot10] <- "Bottom 10"
to_plot =  data.frame(x=R[, 1], y=R[,2], group=as.factor(cols))


ggplot(data=to_plot, aes(x=x, y=y, color=group)) + geom_point()
```

```{r}
R_new <- as.data.frame(R)
R_new$group <- cols

# Same function as depreciated `tidyverse::melt()`:
R_new <- R_new |> rownames_to_column() |> 
  pivot_longer(cols="Comp 1":"Comp 5", names_to = "component")

line_plot <- ggplot(R_new, aes(group=rowname)) + 
  ylab("Residual") +
  # Plot the rest of the dataset with 10% opacity:
  geom_point(data=R_new[R_new$group=="gene",], 
             mapping=aes(x=component, y=value),col="darkgrey", alpha=0.1) +
  geom_line(data=R_new[R_new$group=="gene",], 
            mapping=aes(x=component, y=value),col="darkgrey", alpha=0.1) +

  # Plot Top candidates:
  geom_point(data=R_new[R_new$group=="Top 10",], 
             mapping=aes(x=component, y=value, color=group)) + 
  geom_line(data=R_new[R_new$group=="Top 10",], 
             mapping=aes(x=component, y=value, color=group)) +
  # Plot Bottom candidates:
  geom_point(data=R_new[R_new$group=="Bottom 10",], 
             mapping=aes(x=component, y=value, color=group)) + 
  geom_line(data=R_new[R_new$group=="Bottom 10",], 
             mapping=aes(x=component, y=value, color=group))+
  # Plot baits
  geom_point(data=R_new[R_new$group=="POI",], 
             mapping=aes(x=component, y=value, color=group)) +
  geom_line(data=R_new[R_new$group=="POI",], 
             mapping=aes(x=component, y=value, color=group)) 


line_plot
```

```{r}
resids_t <- t(resids)
found %in% rownames(resids_t)
```

### 2.3.5 Plot example genes

```{r}
library(scales)
name1 <- rownames(Candidates)[1]
name2 <- found[5]

# P1
dim(bla1 <- spls_res$scores %*% t(spls_res$loadings))
dim(bla2 <- spls_res$Yscores %*% t(spls_res$Yloadings))

df1 <- data.frame(gene1=bla1[,name1], 
                  gene2=bla2[,name2], 
                  Celltype = meta.sub$SCINA)
cor1 <- round(cor(df1$gene1, df1$gene2),2)
p1 <- ggplot(data=df1, aes(gene1, gene2)) +
  geom_point(aes(colour=Celltype), alpha = 0.5) +
  xlab(paste0("Bait: ", name1)) +
  ylab(paste0("Candidate: ", name2)) +
  ggtitle(paste0("Reinflated MASCARA\nr = ", cor1))+  
  theme(legend.position = "none")

# P2
# Normalized + transformed counts:
df2 <- data.frame(gene1=counts.sub[name1, ], 
                  gene2=counts.sub[name2, ], 
                  Celltype = meta.sub$SCINA)
cor2 <- round(cor(df2$gene1, df2$gene2),2)

p2 <- ggplot(data=df2, aes(gene1, gene2)) + 
  geom_point(aes(colour=Celltype), alpha = 0.5) + 
  xlab(paste0("Bait: ", name1)) +
  ylab(paste0("Candidate: ", name2)) +
  ggtitle(paste0("Normalized gene expression\nr = ", cor2))+  
  theme(legend.position = "none")

# P3
# Residuals
df3 <- data.frame(gene1=resids[,name1], 
                  gene2=resids[,name2], 
                  Celltype = meta.sub$SCINA)
cor3 <- round(cor(df3$gene1, df3$gene2),2)

p3 <- ggplot(data=df3, aes(gene1, gene2)) + 
  geom_point(aes(colour=Celltype), alpha = 0.5) + 
  xlab(paste0("Bait: ", name1)) +
  ylab(paste0("Candidate: ", name2)) +
  ggtitle(paste0("Residuals\nr = ", cor2))


png(filename="line_and_resplot_singlecell.png", width=600, height=280)
(line_plot + scree_plot_pls) + plot_annotation(tag_levels = "a")
dev.off()
```
```{r}
cormat <- cor(resids[,baits])

melted_cormat <- melt(cormat)

cormat1 <- ggplot(data=melted_cormat, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile() + 
  xlab("") +
  ylab("") +
  geom_text(aes(label=round(value, 2)), color="black") +
  scale_fill_gradient2(low = "#075AFF",
                       mid = "#FFFFCC",
                       high = "#FF0000",
                       breaks=c(-1, 0, 1),
                       limits=c(-1,1)) +
  theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1), axis.text.y=element_blank()) + ggtitle("Residuals")

####
counts.sub2 <- t(counts.sub)
cormat <- cor(counts.sub2[, which(colnames(counts.sub2) %in% baits)])
melted_cormat <- melt(cormat)
cormat2 <- ggplot(data=melted_cormat, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile() + 
  xlab("") +
  ylab("") +
  geom_text(aes(label=round(value, 2)), color="black") +
  scale_fill_gradient2(low = "#075AFF",
                       mid = "#FFFFCC",
                       high = "#FF0000",
                       breaks=c(-1, 0, 1),
                       limits=c(-1,1)) +
  theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1), legend.position = "none") + ggtitle("Gene expression") 

(cormat2 | cormat1) + plot_annotation('Single cells', tag_levels = list(c("a", "b")))
```

```{r}
which(rownames(Candidates))
```
```{r}
baits
```


```{r, fig.width=15, fig.height=8}
library(heatmap.2x)

poi <- found
n <- 1500
top_n <- c(head(rownames(Candidates), n), baits)

annot1 <- rep("white", length(top_n))
annot1[top_n %in% found] <- "green"
annot2 <- rep("white", length(top_n))
annot2[top_n %in% baits] <- "blue"


d <- counts.sub[top_n, ]
final_annot <- rbind(annot1, annot2)
rownames(final_annot) <- c("poi", "baits")

title <- sprintf("Normalized gene expression\nPOI genes in Top %d: %d/%d", 
                 n, 
                 sum(poi %in% head(rownames(Candidates), n)), 
                 length(found)-4)

heatmap.2x(cor(t(d)), 
          trace="none", 
          scale="none",
          col=bluered(100),
          density.info="none",
          ColSideColors=final_annot,
          margins =c(15,15),
          key=FALSE,
          labRow=NA,
          breaks <- seq(-1, 1, length.out = 100), 
          main=title)

```
```{r}
dim(cor(t(d)))
```


```{r, fig.width=15, fig.height=8}
# More weight to the components that explain more variance:
dim(bla1 <- spls_res$scores %*% t(spls_res$loadings))
dim(bla2 <- spls_res$Yscores %*% t(spls_res$Yloadings))

bla3 <- t(cbind(bla1, bla2))

n <- 40
poi <- found
top_n <- c(head(rownames(Candidates), n), baits)

annot1 <- rep("white", length(top_n))
annot1[top_n %in% found] <- "green"
annot2 <- rep("white", length(top_n))
annot2[top_n %in% baits] <- "blue"


d <- bla3[top_n, ]
final_annot <- rbind(annot1, annot2)
rownames(final_annot) <- c("poi", "baits")

title <- sprintf("Reinflated MASCARA\nPOI genes in Top %d: %d/%d", 
                 n, 
                 sum(poi %in% head(rownames(Candidates), n)), 
                 length(found)-4)

heatmap.2x(cor(t(d)), 
          trace="none", 
          scale="none",
          col=bluered(100),
          density.info="none",
          ColSideColors=final_annot,
          margins =c(15,15),
          key=FALSE,
          labRow=NA,
          breaks <- seq(-1, 1, length.out = 100), 
          main=title)


```

```{r}
dim(bla1 <- spls_res$scores %*% t(spls_res$loadings))
dim(bla2 <- spls_res$Yscores %*% t(spls_res$Yloadings))

bla3 <- t(cbind(bla1, bla2))
```


```{r, fig.height=5, fig.width=10}
poi_genes <- found

top_cand <- head(rownames(Candidates), 50)
top_cand <- top_cand[!(top_cand %in% baits)]

set.seed(123)
other <- sample(rownames(Candidates), 1000)


####################################### ASCA residuals

cor_to_list <- function(x){
  x[upper.tri(x, diag=TRUE)] <- NA
  x <- unlist(as.list(x))
  x[!is.na(x)]
}
cor_val <- function(x){
  cor_res <- cor(x[])
  cor_res <- 0.5*log((1+cor_res)/(1-cor_res))
  return(cor_res)
}

# POI
cor_list_poi <- cor_to_list(cor_val(t(resids_t[poi_genes,])))

# TOPN
cor_list_topn <- cor_to_list(cor_val(t(resids_t[top_cand,])))

# OTHER
cor_list_other <- cor_to_list(cor_val(t(resids_t[other,])))

# Baits
cor_list_baits <- cor_to_list(cor_val(t(resids_t[baits,])))
  

# ggplot() + geom_density(aes(x=cor_list_poi)) + geom_density(aes(x=cor_list_other, col="red"))
gene_exp_correls_fig1 <- list(poi=cor_list_poi, other=cor_list_other, baits=cor_list_baits) |> melt(na.rm = TRUE) |> 
  ggplot(aes(x=value)) + 
  geom_density(aes(col=L1)) + 
  xlim(c(-1.1,1.5)) + 
  ggtitle("ASCA residuals") + 
  xlab("Correlation") + xlim(-1.5, 1.5)+
  theme(legend.title=element_blank()) + ylim(0, 12)

gene_exp_correls_fig1
####################################### Normalized gene expression

# POI
cor_list_poi <- cor_to_list(cor_val(t(counts.sub[poi_genes,])))

# TOPN
cor_list_topn <- cor_to_list(cor_val(t(counts.sub[top_cand,])))

# OTHER
cor_list_other <- cor_to_list(cor_val(t(counts.sub[other,])))

cor_list_baits <- cor_to_list(cor_val(t(counts.sub[baits,])))

# ggplot() + geom_density(aes(x=cor_list_poi)) + geom_density(aes(x=cor_list_other, col="red"))
gene_exp_correls_fig2 <- list(poi=cor_list_poi, other=cor_list_other, baits=cor_list_baits) |> melt(na.rm = TRUE) |> 
  ggplot(aes(x=value)) + 
  geom_density(aes(col=L1)) + 
  xlim(c(-1.0,1.5)) + 
  ggtitle("Normalized gene expression") +
  xlab("Correlation") + xlim(-1.5, 1.5)+ ylim(0, 12)+
  theme(legend.title=element_blank())


####################################### Reinflated MASCARA

# POI
cor_list_poi <- cor_to_list(cor_val(t(bla3[poi_genes,])))

# TOPN
cor_list_topn <- cor_to_list(cor_val(t(bla3[top_cand,])))

# OTHER
cor_list_other <- cor_to_list(cor_val(t(bla3[other,])))

cor_list_baits <- cor_to_list(cor_val(t(bla3[baits,])))

# ggplot() + geom_density(aes(x=cor_list_poi)) + geom_density(aes(x=cor_list_other, col="red"))
gene_exp_correls_fig3 <- list(poi=cor_list_poi, other=cor_list_other, baits=cor_list_baits) |> melt(na.rm = TRUE) |>
  ggplot(aes(x=value)) +
  geom_density(aes(col=L1)) +
  ggtitle("MASCARA reinflated") +
  xlab("Correlation") +
  theme(legend.title=element_blank()) +xlim(-1.5, 5)

gene_exp_correls_fig3

######################################
(gene_exp_correls_fig2 + gene_exp_correls_fig1 + gene_exp_correls_fig3)+ plot_annotation(tag_levels = "a") 
```
```{r}
baits
```


```{r}
poi_genes <- found

top_cand <- head(rownames(Candidates), 50)
top_cand <- top_cand[!(top_cand %in% baits)]

set.seed(123)
other <- sample(rownames(Candidates), 1000)


####################################### ASCA residuals

cor_to_list <- function(x){
  x[upper.tri(x, diag=TRUE)] <- NA
  x <- unlist(as.list(x))
  x[!is.na(x)]
}
cor_val <- function(x){
  cor_res <- cor(x[])
  cor_res <- 0.5*log((1+cor_res)/(1-cor_res))
  return(cor_res)
}

# POI
cor_list_poi <- cor_to_list(cor(t(resids_t[poi_genes,])))

# TOPN
cor_list_topn <- cor_to_list(cor(t(resids_t[top_cand,])))

# OTHER
cor_list_other <- cor_to_list(cor(t(resids_t[other,])))

# Baits
cor_list_baits <- cor_to_list(cor(t(resids_t[baits,])))
  

# ggplot() + geom_density(aes(x=cor_list_poi)) + geom_density(aes(x=cor_list_other, col="red"))
gene_exp_correls_fig1 <- list(poi=cor_list_poi, other=cor_list_other, baits=cor_list_baits) |> melt(na.rm = TRUE) |> 
  ggplot(aes(x=value)) + 
  geom_density(aes(col=L1)) + 
  xlim(c(-1.1,1.5)) + 
  ggtitle("ASCA residuals") + 
  xlab("Correlation") + xlim(-1.5, 1.5)+
  theme(legend.title=element_blank()) + ylim(0, 12)

gene_exp_correls_fig1
####################################### Normalized gene expression

# POI
cor_list_poi <- cor_to_list(cor(t(counts.sub[poi_genes,])))

# TOPN
cor_list_topn <- cor_to_list(cor(t(counts.sub[top_cand,])))

# OTHER
cor_list_other <- cor_to_list(cor(t(counts.sub[other,])))

cor_list_baits <- cor_to_list(cor(t(counts.sub[baits,])))

# ggplot() + geom_density(aes(x=cor_list_poi)) + geom_density(aes(x=cor_list_other, col="red"))
gene_exp_correls_fig2 <- list(poi=cor_list_poi, other=cor_list_other, baits=cor_list_baits) |> melt(na.rm = TRUE) |> 
  ggplot(aes(x=value)) + 
  geom_density(aes(col=L1)) + 
  xlim(c(-1.0,1.5)) + 
  ggtitle("Normalized gene expression") +
  xlab("Correlation") + xlim(-1.5, 1.5)+ ylim(0, 12)+
  theme(legend.title=element_blank())


####################################### Reinflated MASCARA

# POI
cor_list_poi <- cor_to_list(cor(t(bla3[poi_genes,])))

# TOPN
cor_list_topn <- cor_to_list(cor(t(bla3[top_cand,])))

# OTHER
cor_list_other <- cor_to_list(cor(t(bla3[other,])))

cor_list_baits <- cor_to_list(cor(t(bla3[baits,])))

# ggplot() + geom_density(aes(x=cor_list_poi)) + geom_density(aes(x=cor_list_other, col="red"))
gene_exp_correls_fig3 <- list(poi=cor_list_poi, other=cor_list_other, baits=cor_list_baits) |> melt(na.rm = TRUE) |>
  ggplot(aes(x=value)) +
  geom_density(aes(col=L1)) +
  ggtitle("MASCARA reinflated") +
  xlab("Correlation") +
  theme(legend.title=element_blank()) 

gene_exp_correls_fig3

######################################
(gene_exp_correls_fig2 + gene_exp_correls_fig1 + gene_exp_correls_fig3) + plot_annotation(tag_levels = "a")
```

```{r}
cor_val <- function(x){
  cor_res <- cor(x[])
  cor_res <- 0.5*log((1+cor_res)/(1-cor_res))
  return(cor_res)
}
```

```{r}
r <- cor(t(bla3[baits,]))

0.5 * log((1+r)/(1-r))
```


```{r, fig.width=15, fig.height=8}
poi <- found
n <- 50
top_n <- head(rownames(Candidates), n)

poi_without_baits <- poi[!(poi %in% baits)]

poi_not_found <- poi_without_baits[!(poi_without_baits %in% top_n)]
poi_found <- poi_without_baits[poi_without_baits %in% top_n]

# Top N + all pathway genes:
selection <- unique(c(top_n, found))

annot1 <- rep("white", length(selection))
annot1[selection %in% poi] <- "green"
annot1[selection %in% poi_not_found] <- "red"

annot2 <- rep("white", length(selection))
annot2[selection %in% baits] <- "blue"


d <- resids_t[selection, ]
final_annot <- rbind(annot1, annot2)
rownames(final_annot) <- c("poi", "baits")

title <- sprintf("Residuals of gene expression\nPOI genes in Top %d: %d/%d", 
                 n, 
                 sum(poi %in% head(rownames(Candidates), n)), 
                 length(found)-4)
library(heatmap.2x)
heatmap.2x(cor(t(d)), 
          trace="none", 
          scale="none",
          col=bluered(100),
          density.info="none",
          ColSideColors=final_annot,
          margins =c(15,15),
          key=FALSE,
          labRow=NA,
          breaks <- seq(-1, 1, length.out = 100), 
          main=title)
```

```{r}
sprintf("POI genes in Top %d: %d/%d", n, sum(poi %in% head(rownames(Candidates), n)), length(found)-4)
```

```{r}
for (n in c(50, 100, 150, 200, 250, 300, 350, 400, 450, 550)){
a <- sprintf("POI genes in Top %d: %d/%d\n", n, sum(poi %in% head(rownames(Candidates), n)), length(found)-4)
cat(a)
}
```

```{r}
for(item in head(rownames(Candidates), 20)){
  cat(item, "\t", item %in% poi, "\n")
}
```



```{r}
X <- resids[,-which(colnames(resids) %in% baits)]
y <- resids[,which(colnames(resids) %in% baits)]
spls_res <- simpls.fit(X, y, ncomp = 5)

dim(bla1 <- (spls_res$loadings %*% t(spls_res$scores)) * (spls_res$Xvar / spls_res$Xtotvar ))
dim(bla2 <- (spls_res$Yloadings %*% t(spls_res$Yscores)) * (spls_res$Xvar / spls_res$Xtotvar ))

bla3 <- t(rbind(bla1, bla2))

# dim(reinflated_x <- (spls_res$scores %*% t(spls_res$loadings))   * (spls_res$Xvar / spls_res$Xtotvar ))
#  dim(reinflated_y <- (spls_res$Yscores %*% t(spls_res$Yloadings)) * (spls_res$Xvar / spls_res$Xtotvar ))
dim(reinflated_all <- rbind(bla1, bla2))

q_bar <- colMeans(spls_res$Yloadings)
R <- spls_res$projection
R_TP <- (dot(t(R),q_bar)/dot(q_bar,q_bar))
  
Candidates <- as.data.frame(R_TP[order(R_TP, decreasing = TRUE)])

poi <- found
n <- 50
top_n <- head(rownames(Candidates), n)

poi_without_baits <- poi[!(poi %in% baits)]

poi_not_found <- poi_without_baits[!(poi_without_baits %in% top_n)]
poi_found <- poi_without_baits[poi_without_baits %in% top_n]

# Top N + all pathway genes:
selection <- unique(c(top_n, found))

annot1 <- rep("white", length(selection))
annot1[selection %in% poi] <- "green"
annot1[selection %in% poi_not_found] <- "red"

annot2 <- rep("white", length(selection))
annot2[selection %in% baits] <- "blue"



d <- reinflated_all[selection, ]
final_annot <- rbind(annot1, annot2)
rownames(final_annot) <- c("poi", "baits")

title <- sprintf("MASCARA inflated gene expression\nPOI genes in Top %d: %d/%d", 
                 n, 
                length(poi_found), 10)

library(heatmap.2x)
heatmap.2x(cor(t(d)), 
          trace="none", 
          scale="none",
          col=bluered(1000),
          density.info="none",
          ColSideColors=final_annot,
          margins =c(15,5),
          key=FALSE,
          dendrogram="column",
          labRow = NA,
          main=title)
```
```{r}
?heatmap.2x
```


```{r}
blue_gene <- "gene:Solyc04g011600.5"
red_gene <- "gene:Solyc05g051550.2"
```

```{r}
library(scales)
name1 <-blue_gene
name2 <- red_gene
# Corrected counts (residuals)
df1 <- data.frame(gene1=resids_t[name1, ], 
                  gene2=resids_t[name2, ], 
                  Celltype = meta.sub$SCINA)
cor1 <- round(cor(df1$gene1, df1$gene2),2)

# Normalized + transformed counts:
df2 <- data.frame(gene1=counts.sub[name1, ], 
                  gene2=counts.sub[name2, ], 
                  Celltype = meta.sub$SCINA)
cor2 <- round(cor(df2$gene1, df2$gene2),2)


# MASCARA
df3 <- data.frame(gene1=reinflated_all[name1, ], 
                  gene2=reinflated_all[name2, ], 
                  Celltype = meta.sub$SCINA)
cor3 <- round(cor(df3$gene1, df3$gene2),2)

# P1
p1 <- ggplot(data=df1, aes(gene1, gene2)) + 
  geom_point(aes(colour=Celltype), alpha = 0.5) + 
  xlab(paste0("Bait: ", name1)) +
  ylab(paste0("Gene: ", name2)) +
  ggtitle(paste0("Residuals\nR:", cor1)) + 
  theme(legend.position = "none")

# P2
p2 <- ggplot(data=df2, aes(gene1, gene2)) + 
  geom_point(aes(colour=Celltype), alpha = 0.5) + 
  xlab(paste0("Bait: ", name1)) +
  ylab(paste0("Gene: ", name2)) +
  ggtitle(paste0("Gene expression \nR:", cor2))+ 
  theme(legend.position = "none")

# P3
p3 <- ggplot(data=df3, aes(gene1, gene2)) + 
  geom_point(aes(colour=Celltype), alpha = 0.5) + 
  xlab(paste0("Bait: ", name1)) +
  ylab(paste0("Gene: ", name2)) +
  ggtitle(paste0("MASCARA reinflated \nR:", cor3))+ 
  theme(legend.position = "none")

png(filename="gene_plot1.png", width=600, height=600)
plotje <- p2+p1+p3+ plot_layout(widths = c(5, 5, 5), heights = c(6,6,6)) + plot_annotation(tag_levels = "a")
plotje
dev.off()
plotje
```


```{r}
poi <- found
n <- 50
top_n <- head(rownames(Candidates), n)

poi_without_baits <- poi[!(poi %in% baits)]

poi_not_found <- poi_without_baits[!(poi_without_baits %in% top_n)]
poi_found <- poi_without_baits[poi_without_baits %in% top_n]

# Top N + all pathway genes:
selection <- unique(c(top_n, found))

annot1 <- rep("white", length(selection))
annot1[selection %in% poi] <- "green"
annot1[selection %in% poi_not_found] <- "red"

annot2 <- rep("white", length(selection))
annot2[selection %in% baits] <- "blue"



d <- counts.sub[selection, ]
final_annot <- rbind(annot1, annot2)
rownames(final_annot) <- c("poi", "baits")

title <- sprintf("Normalized expression\nPOI genes in Top %d: %d/%d", 
                 n, 
                length(poi_found), 10)

library(heatmap.2x)
heatmap.2x(cor(t(d)), 
          trace="none", 
          scale="none",
          col=bluered(100),
          density.info="none",
          ColSideColors=final_annot,
          margins =c(15,15),
          key=FALSE,
          labRow=NA,
          breaks <- seq(-1, 1, length.out = 100), 
          main=title)
```


# 3 MASCARA on strigolactone genes

```{r}
# pbmc <- readRDS("../02_scRNA_analysis/data/single_cell_pbmc.rds")
pbmc <- readRDS("../02_scRNA_analysis/data/pbmc_with_scina.rds")
```

```{r}
colnames(pbmc@meta.data)
```

```{r}
table(pbmc@meta.data$SCINA)
```

## 3.1 Summary statistics

### 3.1.1 Dotplots of strigolactone genes

```{r}
strigolactone_genes <- c("Solyc09g065750","Solyc01g090660","Solyc08g066650","Solyc08g062950", "Solyc10g018150","Solyc02g084930", "Solyc08g067620", "Solyc08g067610")
found <- c()
for(bait in strigolactone_genes){
  found <- c(found, rownames(pbmc)[grep(bait, rownames(pbmc))])
}
for(item in c("chisquare", "scsorter", "sctype_classification", "SCINA")){
  Idents(pbmc) <- item
  p <- DotPlot(pbmc, features=found, scale=TRUE,) + RotatedAxis() + coord_flip() + ggtitle(item)
  plot(p)
}

```

## 3.2 Cleanup

### 3.2.1 Drop unknowns

```{r}
pbmc <- pbmc[, pbmc$SCINA != "unknown"]
pbmc
```

### 3.2.2 Selection of expressed cells

```{r}
found <- c()
for(bait in strigolactone_genes){
  found <- c(found, rownames(pbmc)[grep(bait, rownames(pbmc))])
}
# Select suberin genes and calculate the sum of the expression
# if that sum is > 1: keep
expr <- GetAssayData(pbmc)
strigolactone_expression_cells <- colSums(expr[rownames(expr) %in% found,]) > 1

pbmc_selection <- pbmc[,strigolactone_expression_cells]
table(strigolactone_expression_cells)
```

```{r}
DimPlot(pbmc_selection)
```

### 3.2.3 Selection of expressed genes

```{r}
counts.sub <- as.matrix(GetAssayData(pbmc_selection))
non_zero <- apply(counts.sub, 1, function(x) sum(x > 0)/length(x))

# At least 2% data:
counts.sub <- counts.sub[non_zero > 0.02, ]
cat("Cells: ", dim(counts.sub)[2], "\n")
cat("Genes: ", dim(counts.sub)[1], "\n")
```

## 3.3 MASCARA

```{r}
meta.sub <- pbmc_selection@meta.data
meta <- data.frame(scsorter=meta.sub$scsorter, 
                   seurat=meta.sub$seurat_clusters, 
                   chisquare=meta.sub$chisquare, 
                   sctype=meta.sub$sctype,
                   SCINA=meta.sub$SCINA)
head(meta)
```

```{r}
as.data.frame(table(meta$SCINA)) |> ggplot() + 
  geom_col(aes(y=Var1, x=Freq)) + 
  xlab("Cell count") + 
  ylab("Celltype")
```

### 3.3.1 ASCA

```{r}
ar <- ASCA_decompose(d = meta, x = t(counts.sub), f = "SCINA")
resids <- ar$residuals
```

```{r}
hist(resids)
```

### 3.3.2 Correl plot

```{r}
found <- found[found %in% colnames(resids)]
found
```

```{r}
cormat <- cor(resids[,which(colnames(resids) %in% found)])

melted_cormat <- melt(cormat)

ggplot(data=melted_cormat, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile() + 
  xlab("") +
  ylab("") +
  geom_text(aes(label=round(value, 2)), color="white") +
  scale_fill_gradient2(low = "#075AFF",
                       mid = "#FFFFCC",
                       high = "#FF0000",
                       breaks=c(-1, 0, 1),
                       limits=c(-1,1)) +
  theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))

```

```{r}
cormat <- cor(t(counts.sub[found,]))

melted_cormat <- melt(cormat)

ggplot(data=melted_cormat, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile() + 
  xlab("") +
  ylab("") +
  geom_text(aes(label=round(value, 1)), color="white") +
  scale_fill_gradient2(low = "#075AFF",
                       mid = "#FFFFCC",
                       high = "#FF0000",
                       breaks=c(-1, 0, 1),
                       limits=c(-1,1)) +
  theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
```

### 3.3.3 PLS + Candidates

```{r}
library(pls)
X <- resids[,-which(colnames(resids) %in% found[1:4])]
y <- resids[,which(colnames(resids) %in% found[1:4])]
spls_res <- simpls.fit(X, y, ncomp = 5)

q_bar <- colMeans(spls_res$Yloadings)
R <- spls_res$projection
R_TP <- (dot(t(R),q_bar)/dot(q_bar,q_bar))
  
Candidates <- as.data.frame(R_TP[order(R_TP, decreasing = TRUE)])
```

### 3.3.4 Lineplot the components

```{r}
# Create color list of top20:
cols <- rep("gene", nrow(R))
top10 <- head(rownames(Candidates), 10)
bot10 <- tail(rownames(Candidates), 10)

cols[rownames(R) %in% top10] <- "Top 10"
cols[rownames(R) %in% bot10] <- "Bottom 10"
cols[rownames(R) %in% found] <- "bait"
to_plot =  data.frame(x=R[, 1], y=R[,2], group=as.factor(cols))


ggplot(data=to_plot, aes(x=x, y=y, color=group)) + geom_point()
```

```{r}
R_new <- as.data.frame(R)
R_new$group <- cols

# Same function as depreciated `tidyverse::melt()`:
R_new <- R_new |> rownames_to_column() |> 
  pivot_longer(cols="Comp 1":"Comp 5", names_to = "component")

ggplot(R_new, aes(group=rowname)) + 
  ylab("Residual") +
  # Plot the rest of the dataset with 10% opacity:
  geom_point(data=R_new[R_new$group=="gene",], 
             mapping=aes(x=component, y=value),col="darkgrey", alpha=0.1) +
  geom_line(data=R_new[R_new$group=="gene",], 
            mapping=aes(x=component, y=value),col="darkgrey", alpha=0.1) +
  # Plot baits
  geom_point(data=R_new[R_new$group=="bait",], 
             mapping=aes(x=component, y=value, color=group)) +
  geom_line(data=R_new[R_new$group=="bait",], 
             mapping=aes(x=component, y=value, color=group)) +
  # Plot Top candidates:
  geom_point(data=R_new[R_new$group=="Top 10",], 
             mapping=aes(x=component, y=value, color=group)) + 
  geom_line(data=R_new[R_new$group=="Top 10",], 
             mapping=aes(x=component, y=value, color=group)) +
  # Plot Bottom candidates:
  geom_point(data=R_new[R_new$group=="Bottom 10",], 
             mapping=aes(x=component, y=value, color=group)) + 
  geom_line(data=R_new[R_new$group=="Bottom 10",], 
             mapping=aes(x=component, y=value, color=group))
```

```{r}
Candidates
```

```{r}
resids_t <- t(resids)
found %in% rownames(resids_t)
```

### 3.3.5 Plot example genes

```{r}
library(scales)
name1 <- rownames(Candidates)[2]
name2 <- found[2]

# Corrected counts (residuals)
df1 <- data.frame(gene1=resids_t[name1, ], 
                  gene2=resids_t[name2, ], 
                  Celltype = meta.sub$SCINA)
cor1 <- round(cor(df1$gene1, df1$gene2),2)

# Normalized + transformed counts:
df2 <- data.frame(gene1=counts.sub[name1, ], 
                  gene2=counts.sub[name2, ], 
                  Celltype = meta.sub$SCINA)
cor2 <- round(cor(df2$gene1, df2$gene2),2)


# P1
p1 <- ggplot(data=df1, aes(gene1, gene2)) + 
  geom_point(aes(colour=Celltype), alpha = 0.5) + 
  xlab(paste0("Bait: ", name1)) +
  ylab(paste0("Candidate: ", name2)) +
  ggtitle(paste0("Residuals of gene expression\ncorr:", cor1)) + 
  theme(legend.position = "none")

# P2
p2 <- ggplot(data=df2, aes(gene1, gene2)) + 
  geom_point(aes(colour=Celltype), alpha = 0.5) + 
  xlab(paste0("Bait: ", name1)) +
  ylab(paste0("Candidate: ", name2)) +
  ggtitle(paste0("Gene expression \ncorr:", cor2))+ 
  theme(legend.position = "none")


p1+p2
```

```{r}

```

